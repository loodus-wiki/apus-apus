#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
from pathlib import Path
from difflib import unified_diff
import argparse

class MarkdownTranslationComparer:
    def __init__(self, ru_dir="docs/ru", est_dir="docs/est"):
        self.ru_dir = Path(ru_dir)
        self.est_dir = Path(est_dir)
        
    def extract_content_blocks(self, file_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ markdown —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            return None, None
            
        # –†–∞–∑–¥–µ–ª—è–µ–º front matter –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        parts = content.split('---', 2)
        if len(parts) >= 3:
            front_matter = parts[1].strip()
            main_content = parts[2].strip()
        else:
            front_matter = ""
            main_content = content.strip()
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã (–ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º)
        paragraphs = [p.strip() for p in main_content.split('\n\n') if p.strip()]
        
        return front_matter, paragraphs
    
    def clean_markdown(self, text):
        """–û—á–∏—â–∞–µ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        text = re.sub(r'^\s*#+\s*', '', text, flags=re.MULTILINE)  # –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = re.sub(r'\*(.*?)\*', r'\1', text)  # –∫—É—Ä—Å–∏–≤
        text = re.sub(r'`(.*?)`', r'\1', text)  # –∫–æ–¥
        text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)  # —Å—Å—ã–ª–∫–∏
        return text.strip()
    
    def show_processed_content(self, filename, show_raw=False, show_paragraphs=False, show_cleaned=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        ru_file = self.ru_dir / filename
        est_file = self.est_dir / filename
        
        print(f"\n{'='*60}")
        print(f"–û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {filename}")
        print(f"{'='*60}")
        
        for lang, file_path in [("RU", ru_file), ("EST", est_file)]:
            if not file_path.exists():
                print(f"‚ùå {lang} —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
                
            print(f"\nüîç {lang} —Ñ–∞–π–ª: {file_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if show_raw:
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        raw_content = f.read()
                    print(f"\nüìÑ –°–´–†–û–ô –ö–û–ù–¢–ï–ù–¢ ({lang}):")
                    print("‚îÄ" * 40)
                    print(repr(raw_content))  # repr –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∞—è \n
                    print("‚îÄ" * 40)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º front matter –∏ –∞–±–∑–∞—Ü—ã
            front_matter, paragraphs = self.extract_content_blocks(file_path)
            
            if paragraphs is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {lang} —Ñ–∞–π–ª")
                continue
            
            print(f"\nüìã FRONT MATTER ({lang}):")
            print("‚îÄ" * 40)
            print(repr(front_matter))
            print("‚îÄ" * 40)
            
            if show_paragraphs:
                print(f"\nüìù –ê–ë–ó–ê–¶–´ –ü–û–°–õ–ï –†–ê–ó–ë–ò–í–ö–ò ({lang}) - {len(paragraphs)} —à—Ç.:")
                for i, para in enumerate(paragraphs, 1):
                    print(f"\n[–ê–±–∑–∞—Ü {i}] ({len(para)} —Å–∏–º–≤–æ–ª–æ–≤):")
                    print("‚îÄ" * 30)
                    print(repr(para))  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
                    print("‚îÄ" * 30)
                    print("–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç:")
                    print(para)
                    
                    if show_cleaned:
                        cleaned = self.clean_markdown(para)
                        print("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ markdown:")
                        print(repr(cleaned))
                        print("–û—á–∏—â–µ–Ω–Ω—ã–π –≤–∏–¥:")
                        print(cleaned)
                    print()

    def compare_files(self, filename):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ —ç—Å—Ç–æ–Ω—Å–∫–∏–π —Ñ–∞–π–ª—ã"""
        ru_file = self.ru_dir / filename
        est_file = self.est_dir / filename
        
        print(f"\n{'='*60}")
        print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
        print(f"{'='*60}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not ru_file.exists():
            print(f"‚ùå –†—É—Å—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ru_file}")
            return
        if not est_file.exists():
            print(f"‚ùå –≠—Å—Ç–æ–Ω—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {est_file}")
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        ru_front, ru_paragraphs = self.extract_content_blocks(ru_file)
        est_front, est_paragraphs = self.extract_content_blocks(est_file)
        
        if ru_paragraphs is None or est_paragraphs is None:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")
            return
            
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –†—É—Å—Å–∫–∏–π: {len(ru_paragraphs)} –∞–±–∑–∞—Ü–µ–≤")
        print(f"   –≠—Å—Ç–æ–Ω—Å–∫–∏–π: {len(est_paragraphs)} –∞–±–∑–∞—Ü–µ–≤")
        
        if len(ru_paragraphs) != len(est_paragraphs):
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤!")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º front matter
        if ru_front != est_front:
            print(f"\nüìù Front Matter –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è:")
            self.show_diff("RU Front Matter", "EST Front Matter", ru_front, est_front)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞–±–∑–∞—Ü—ã
        max_paragraphs = max(len(ru_paragraphs), len(est_paragraphs))
        
        missing_translations = []
        structural_differences = []
        
        for i in range(max_paragraphs):
            print(f"\n--- –ê–±–∑–∞—Ü {i+1} ---")
            
            ru_para = ru_paragraphs[i] if i < len(ru_paragraphs) else "[–û–¢–°–£–¢–°–¢–í–£–ï–¢]"
            est_para = est_paragraphs[i] if i < len(est_paragraphs) else "[PUUDUB]"
            
            if ru_para == "[–û–¢–°–£–¢–°–¢–í–£–ï–¢]":
                print("‚ùå –†—É—Å—Å–∫–∏–π –∞–±–∑–∞—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                missing_translations.append(f"–ê–±–∑–∞—Ü {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä—É—Å—Å–∫–∏–π")
            elif est_para == "[PUUDUB]":
                print("‚ùå –≠—Å—Ç–æ–Ω—Å–∫–∏–π –∞–±–∑–∞—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                missing_translations.append(f"–ê–±–∑–∞—Ü {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç—Å—Ç–æ–Ω—Å–∫–∏–π")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                ru_clean = self.clean_markdown(ru_para)
                est_clean = self.clean_markdown(est_para)
                
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                ru_sentences = len([s for s in ru_clean.split('.') if s.strip()])
                est_sentences = len([s for s in est_clean.split('.') if s.strip()])
                
                if abs(ru_sentences - est_sentences) > 1:
                    structural_differences.append(f"–ê–±–∑–∞—Ü {i+1}: RU={ru_sentences} –ø—Ä–µ–¥–ª., EST={est_sentences} –ø—Ä–µ–¥–ª.")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–±–∑–∞—Ü–µ–≤
                print(f"üá∑üá∫ RU ({len(ru_para)} —Å–∏–º–≤.): {ru_para[:100]}{'...' if len(ru_para) > 100 else ''}")
                print(f"üá™üá™ EST ({len(est_para)} —Å–∏–º–≤.): {est_para[:100]}{'...' if len(est_para) > 100 else ''}")
                
                if structural_differences and structural_differences[-1].startswith(f"–ê–±–∑–∞—Ü {i+1}"):
                    print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ: {structural_differences[-1]}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n{'='*40}")
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"{'='*40}")
        
        if not missing_translations and not structural_differences:
            print("‚úÖ –§–∞–π–ª—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É")
        else:
            if missing_translations:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã:")
                for item in missing_translations:
                    print(f"   ‚Ä¢ {item}")
            
            if structural_differences:
                print("‚ö†Ô∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:")
                for item in structural_differences:
                    print(f"   ‚Ä¢ {item}")
    
    def show_diff(self, label1, label2, text1, text2):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç diff –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
        diff = unified_diff(
            text1.splitlines(keepends=True),
            text2.splitlines(keepends=True),
            fromfile=label1,
            tofile=label2,
            n=3
        )
        
        for line in diff:
            if line.startswith('+++') or line.startswith('---'):
                print(f"üìÑ {line.strip()}")
            elif line.startswith('@@'):
                print(f"üìç {line.strip()}")
            elif line.startswith('+'):
                print(f"üü¢ {line.rstrip()}")
            elif line.startswith('-'):
                print(f"üî¥ {line.rstrip()}")
            else:
                print(f"   {line.rstrip()}")
    
    def find_all_markdown_files(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ markdown —Ñ–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        ru_files = set()
        est_files = set()
        
        if self.ru_dir.exists():
            ru_files = {f.name for f in self.ru_dir.glob("*.md")}
        
        if self.est_dir.exists():
            est_files = {f.name for f in self.est_dir.glob("*.md")}
        
        all_files = ru_files.union(est_files)
        return sorted(all_files)
    
    def compare_all_files(self):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ markdown —Ñ–∞–π–ª—ã"""
        files = self.find_all_markdown_files()
        
        if not files:
            print("‚ùå Markdown —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        for filename in files:
            self.compare_files(filename)
            
        print(f"\n{'='*60}")
        print("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"{'='*60}")

def main():
    parser = argparse.ArgumentParser(description="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ Jekyll —Å–∞–π—Ç–∞ (—Ä—É—Å—Å–∫–∏–π-—ç—Å—Ç–æ–Ω—Å–∫–∏–π)")
    parser.add_argument("--ru-dir", default="docs/ru", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏")
    parser.add_argument("--est-dir", default="docs/est", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —ç—Å—Ç–æ–Ω—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏")
    parser.add_argument("--file", help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: exhaustion.md)")
    
    # –û–ø—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
    parser.add_argument("--debug", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    parser.add_argument("--show-raw", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--show-paragraphs", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ –∞–±–∑–∞—Ü—ã")
    parser.add_argument("--show-cleaned", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç markdown —Ç–µ–∫—Å—Ç")
    
    args = parser.parse_args()
    
    comparer = MarkdownTranslationComparer(args.ru_dir, args.est_dir)
    
    if args.debug and args.file:
        # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª
        comparer.show_processed_content(
            args.file, 
            show_raw=args.show_raw,
            show_paragraphs=args.show_paragraphs or True,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–±–∑–∞—Ü—ã –≤ debug
            show_cleaned=args.show_cleaned
        )
    elif args.file:
        comparer.compare_files(args.file)
    else:
        comparer.compare_all_files()

if __name__ == "__main__":
    main()